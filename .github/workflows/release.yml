name: release
on:
  push:
    tags:
    - 'v2.[0-9]+.[0-9]+'
    - 'v2.[0-9]+.[0-9]+-beta.[0-9]+'

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-20.04
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      sws_version: ${{ env.SWS_VERSION }}
    steps:
      - name: Get the release version from the tag
        shell: bash
        if: env.SWS_VERSION == ''
        run: |
          # Apparently, this is the right way to get a tag name. Really?
          #
          # See: https://github.community/t5/GitHub-Actions/How-to-get-just-the-tag-name/m-p/32167/highlight/true#M1027
          echo "SWS_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "version is: ${{ env.SWS_VERSION }}"
      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.SWS_VERSION }}
          draft: true
          release_name: ${{ env.SWS_VERSION }}

  build-release:
    name: build-release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO_BIN: cargo
      # When CARGO_BIN is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS: ""
      # When CARGO_BIN is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        build:
          - linux-musl
          - linux-musl-arm64
          - linux-musl-i686
          - linux-gnu
          - linux-gnu-arm64
          - linux-gnu-i686
          - linux-arm-gnueabihf
          - linux-musl-armv6
          - linux-musl-armv7
          - linux-ppc64le
          - linux-s390x
          - macos
          - macos-arm64
          - windows-msvc
          - windows-msvc-i686
          - windows-pc-gnu
          # - windows-msvc-arm64
        include:
        - build: linux-musl
          os: ubuntu-20.04
          rust: stable
          target: x86_64-unknown-linux-musl
        - build: linux-musl-i686
          os: ubuntu-20.04
          rust: stable
          target: i686-unknown-linux-musl
        - build: linux-musl-arm64
          os: ubuntu-20.04
          rust: stable
          target: aarch64-unknown-linux-musl
        - build: linux-gnu
          os: ubuntu-20.04
          rust: stable
          target: x86_64-unknown-linux-gnu
        - build: linux-gnu-i686
          os: ubuntu-20.04
          rust: stable
          target: i686-unknown-linux-gnu
        - build: linux-gnu-arm64
          os: ubuntu-20.04
          rust: stable
          target: aarch64-unknown-linux-gnu
        - build: linux-arm-gnueabihf
          os: ubuntu-20.04
          rust: stable
          target: arm-unknown-linux-gnueabihf
        - build: linux-musl-armv6
          os: ubuntu-20.04
          rust: stable
          target: arm-unknown-linux-musleabihf
        - build: linux-musl-armv7
          os: ubuntu-20.04
          rust: stable
          target: armv7-unknown-linux-musleabihf
        - build: linux-ppc64le
          os: ubuntu-20.04
          rust: stable
          target: powerpc64le-unknown-linux-gnu
        - build: linux-s390x
          os: ubuntu-20.04
          rust: stable
          target: s390x-unknown-linux-gnu
        - build: macos
          os: macos-11
          rust: stable
          target: x86_64-apple-darwin
        - build: macos-arm64
          os: macos-11
          rust: stable
          target: aarch64-apple-darwin
        - build: windows-msvc
          os: windows-2019
          rust: stable
          target: x86_64-pc-windows-msvc
        - build: windows-msvc-i686
          os: windows-2019
          rust: stable
          target: i686-pc-windows-msvc
        - build: windows-pc-gnu
          os: windows-2019
          rust: stable-x86_64-gnu
          target: x86_64-pc-windows-gnu
        # - build: windows-msvc-arm64
        #   os: windows-2019
        #   rust: stable
        #   target: aarch64-pc-windows-msvc

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        target: ${{ matrix.target }}

    - name: Use Cross
      shell: bash
      run: |
        cargo install cross@^0.2
        echo "CARGO_BIN=cross" >> $GITHUB_ENV
        echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
        echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

    - name: Show command used for Cargo
      run: |
        echo "cargo command is: ${{ env.CARGO_BIN }}"
        echo "target flag is: ${{ env.TARGET_FLAGS }}"
        echo "target dir is: ${{ env.TARGET_DIR }}"

    - name: Build release binary
      run: ${{ env.CARGO_BIN }} build --verbose --release ${{ env.TARGET_FLAGS }}

    - name: Strip release binary (linux and macos)
      if: matrix.os != 'windows-2019' && matrix.build != 'linux-arm-gnueabihf' && matrix.build != 'linux-musl-armv7' && matrix.build != 'linux-musl-armv6' && matrix.build != 'linux-gnu-arm64' && matrix.build != 'linux-musl-arm64' && matrix.build != 'linux-musl-i686'
      run: strip "target/${{ matrix.target }}/release/static-web-server"

    - name: Strip release binary (linux-arm-gnueabihf)
      if: matrix.build == 'linux-arm-gnueabihf'
      run: |
        docker run --rm -v "$PWD/target:/target:Z" \
          rustembedded/cross:arm-unknown-linux-gnueabihf \
          arm-linux-gnueabihf-strip /target/arm-unknown-linux-gnueabihf/release/static-web-server

    - name: Strip release binary (linux-musl-armv7)
      if: matrix.build == 'linux-musl-armv7'
      run: |
        docker run --rm -v "$PWD/target:/target:Z" \
          rustembedded/cross:armv7-unknown-linux-musleabihf \
          arm-linux-musleabihf-strip /target/armv7-unknown-linux-musleabihf/release/static-web-server

    - name: Strip release binary (linux-musl-armv6)
      if: matrix.build == 'linux-musl-armv6'
      run: |
        docker run --rm -v "$PWD/target:/target:Z" \
          rustembedded/cross:arm-unknown-linux-musleabihf \
          arm-linux-musleabihf-strip /target/arm-unknown-linux-musleabihf/release/static-web-server

    - name: Strip release binary (linux-gnu-arm64)
      if: matrix.build == 'linux-gnu-arm64'
      run: |
        docker run --rm -v "$PWD/target:/target:Z" \
          rustembedded/cross:aarch64-unknown-linux-gnu \
          aarch64-linux-gnu-strip /target/aarch64-unknown-linux-gnu/release/static-web-server

    - name: Strip release binary (linux-musl-arm64)
      if: matrix.build == 'linux-musl-arm64'
      run: |
        docker run --rm -v "$PWD/target:/target:Z" \
          rustembedded/cross:aarch64-unknown-linux-musl \
          aarch64-linux-musl-strip /target/aarch64-unknown-linux-musl/release/static-web-server

    - name: Strip release binary (linux-musl-i686)
      if: matrix.build == 'linux-musl-i686'
      run: |
        docker run --rm -v "$PWD/target:/target:Z" \
          rustembedded/cross:i686-unknown-linux-musl \
          i686-linux-musl-strip /target/i686-unknown-linux-musl/release/static-web-server

    - name: Build archive
      shell: bash
      run: |
        staging="static-web-server-${{ needs.create-release.outputs.sws_version }}-${{ matrix.target }}"
        mkdir -p "$staging/"
        mkdir -p bin

        cp {README.md,LICENSE-APACHE,LICENSE-MIT} "$staging/"

        if [ "${{ matrix.os }}" = "windows-2019" ]; then
          cp "target/${{ matrix.target }}/release/static-web-server.exe" "$staging/"
          7z a "$staging.zip" "$staging"
          echo "ASSET=$staging.zip" >> $GITHUB_ENV
        else
          # The man page is only generated on Unix systems.
          cp "target/${{ matrix.target }}/release/static-web-server" "$staging/"
          cp "$staging/static-web-server" bin/
          tar czf "$staging.tar.gz" "$staging"
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
        fi

    - name: Upload release archive
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream
